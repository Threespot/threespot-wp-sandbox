//------------------------------------------------------------------------
// Layout mixins
//------------------------------------------------------------------------
$is-admin--layout: false !default;

@use "frontline-sass" as *;
@use "@vars" as *;
@use "admin-media-query" as *;

// Allow element to span viewport width regardless of parent width
// NOTE: These styles only work when the parent wrapper is centered.
// NOTE: These styles will break blocks with parallax backgrounds (e.g. cover)
@mixin layout-fullwidth($important: false) {
  $is-admin: $is-admin--layout;
  left: 50% #{if($important, ' !important', '')};
  position: relative #{if($important, ' !important', '')};
  transform: translateX(-50%) #{if($important, ' !important', '')};
  width: 100vw #{if($important, ' !important', '')};

  // In the admin, we need to account for the WP menu and the sidebar
  @if $is-admin {
    @media (min-width: $admin-menu-bp) {

      // Admin menu
      #{$admin-selector-default} & {
        width: calc(100vw - #{$admin-menu-width});
      }

      // Admin menu with sidebar
      #{$admin-selector-default-sidebar} & {
        width: calc(100vw - #{$admin-menu-width + $admin-sidebar-width});
      }

      // Fullscreen mode with sidebar
      #{$admin-selector-fullscreen-sidebar} & {
        width: calc(100vw - #{$admin-sidebar-width});
      }
    }

    @media (min-width: $admin-menu-wide-bp) {
      // Wide admin menu
      #{$admin-selector-default} & {
        width: calc(100vw - #{$admin-menu-width-wide});
      }

      // Wide admin menu with sidebar
      #{$admin-selector-default-sidebar} & {
        width: calc(100vw - #{$admin-menu-width-wide + $admin-sidebar-width});
      }
    }
  }

  // We need to recalculate the left offset when there’s a sidebar
  // .l-sidebar & {
  //   @include min-width($layout-sidebar-bp) {
  //     left: calc(50% - (#{$layout-sidebar-width} * 0.5));
  //   }
  // }
}

// Helper mixin for setting widths that extend beyond the parent wrapper
// NOTE: These styles will break blocks with parallax backgrounds (e.g. cover)
@mixin layout-max-width($max-width) {
  $is-admin: $is-admin--layout;
  max-width: $max-width;

  // Only needed if nested inside of another “l-wrap” class
  // Note: Just checking for [class*="l-wrap"] can result in false positives
  //       e.g. “Modal-wrap” would match
  [class^="l-wrap"] &,
  [class*=" l-wrap"] & {
    @include min-width($layout-max-width-narrow-bp) {
      left: 50%;
      position: relative;
      transform: translateX(-50%);
      width: calc(100vw - #{$layout-padding-max * 2});
    }
  }

  @if $is-admin {
    @include min-width($layout-max-width-narrow-bp) {
      left: 50%;
      position: relative;
      transform: translateX(-50%);
      width: calc(100vw - #{$layout-padding-max * 2});
    }

    @media (min-width: $admin-menu-bp) {
      // Admin menu
      #{$admin-selector-default} & {
        width: calc(100vw - #{($layout-padding-max * 2) + $admin-menu-width});
      }

      // Admin menu and sidebar
      #{$admin-selector-default-sidebar} & {
        width: calc(100vw - #{($layout-padding-max * 2) + $admin-menu-width + $admin-sidebar-width});
      }

      // Fullscreen mode with sidebar
      #{$admin-selector-fullscreen-sidebar} & {
        width: calc(100vw - #{($layout-padding-max * 2) + $admin-sidebar-width});
      }
    }

    @media (min-width: $admin-menu-wide-bp) {
      // Wide admin menu
      #{$admin-selector-default} & {
        width: calc(100vw - #{($layout-padding-max * 2) + $admin-menu-width-wide});
      }

      // Wide admin menu and sidebar
      #{$admin-selector-default-sidebar} & {
        width: calc(100vw - #{($layout-padding-max * 2) + $admin-menu-width-wide + $admin-sidebar-width});
      }
    }
  }
}

// Custom max-width mixins
@mixin layout-wide() {
  @include layout-max-width($layout-max-width);
}

// Global left/right padding mixin, used by _layout-helpers.scss
@mixin default-padding($props: padding-inline) {
  @each $prop in $props {
    #{$prop}: scale-clamp((
      $layout-padding-min-bp: $layout-padding-min,
      $layout-padding-max-bp: $layout-padding-max
    ));
  }
}

// Default block vertical margin
@mixin default-block-margin($props: margin-block) {
  @each $prop in $props {
    #{$prop}: scale-clamp((375px: 50px, 1366px: 100px));
  }
}

// Default vert padding on strata with background colors
@mixin strata-vert-padding() {
  & {
    padding-bottom: scale-clamp(($layout-padding-min-bp: 40px, $layout-padding-max-bp: 60px));
    padding-top: scale-clamp(($layout-padding-min-bp: 40px, $layout-padding-max-bp: 60px));
  }
}
