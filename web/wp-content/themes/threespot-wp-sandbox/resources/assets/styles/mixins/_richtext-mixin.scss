// -------------------------------------------------------------------------
// Rich-text styles for post body
//
// Uses opt-in typography technique (see http://css-tricks.com/opt-in-typography/)
//
// scss-lint:disable ImportantRule, NestingDepth, SelectorDepth
// sass-lint:disable no-important, force-element-nesting
// -------------------------------------------------------------------------
@mixin richtext() {
  @include fs-clearfix;
  line-height: $body-copy-line-height;

  // Only apply rich text styles to direct children to avoid
  // conflicts with custom components.
  & > {
    *:first-child {
      margin-top: 0;
    }

    *:last-child {
      margin-bottom: 0;
    }

    p {
      margin-bottom: 1em;

      // Custom paragraph block style
      //
      // &.is-style-intro {
      //   @include intro-text;
      // }

      // Hide any empty paragraphs inadvertantly created in the rich text editor
      &:empty {
        display: none !important;
      }
    }

    // Update header mixins in `rich-text-headings.scss`
    // Add h1 styles just in case, but normally <h1> should not be used inside of richtext
    h1 { @include h2; }
    h2 { @include h2; }
    h3 { @include h3; }
    h4 { @include h4; }
    h5 { @include h5; }
    h6 { @include h6; }

    h1, h2, h3, h4, h5, h6 {
      margin-bottom: 1em;
      margin-top: 1.5em;

      &:first-child {
        margin-top: 0;
      }

      // Inherit custom block text color
      .has-text-color & {
        color: currentColor;
      }
    }

    // Remove top margin on adjacent headings
    // Note: We’re only considering accessible heading combinations.
    // https://github.com/postcss/autoprefixer/issues/902#issuecomment-742555755
    h2 + h2,
    h2 + h3,
    h3 + h3,
    h3 + h4,
    h4 + h4,
    h4 + h5,
    h5 + h5,
    h5 + h6,
    h6 + h6 {
      margin-top: 0;
    }

    // Note: We could also use :is() with all heading combinations:
    //
    //   :is(h1, h2, h3, h4, h5, h6) + :is(h1, h2, h3, h4, h5, h6) {
    //     margin-top: 0;
    //   }
    //
    // But Autoprefixer can’t covnert :is() so we would need these too:
    //
    //   :-webkit-any(h1, h2, h3, h4, h5, h6) + :-webkit-any(h1, h2, h3, h4, h5, h6) {
    //     margin-top: 0;
    //   }
    //   :-moz-any(h1, h2, h3, h4, h5, h6) + :-moz-any(h1, h2, h3, h4, h5, h6) {
    //     margin-top: 0;
    //   }
    //
    // NOTE: We’re NOT using :matches() above because Autoprefixer seems
    //       to convert it to every element combination.
    //
    // Example:
    //
    //   :matches(h1, h2, h3, h4, h5, h6) + :matches(h1, h2, h3, h4, h5, h6) {
    //     margin-top: 0;
    //   }
    //
    // Gets converted to:
    //
    //   .u-richtext > h1 + h1,
    //   .u-richtext > h2 + h1,
    //   .u-richtext > h3 + h1,
    //   …
    //   .u-richtext > h6 + h6
    //
    // @link https://github.com/postcss/autoprefixer/issues/902
    // @link https://caniuse.com/css-matches-pseudo
    // @link https://developer.mozilla.org/en-US/docs/Web/CSS/:is

    // Lists
    // Note: Use “::marker” to avoid setting “list-style: none;” which
    //       causes VO in Safari to drop the list semantics.
    // https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html
    //---------------------------------
    ol,
    ul {
      $list-item-margin: 1em;
      margin-bottom: 2em;
      margin-top: 2em;
      overflow: hidden; // Prevent custom bullets from overlapping floated elements

      ul,
      ol {
        margin-bottom: 0;
      }

      li {
        margin-top: $list-item-margin;

        &:first-child {
          margin-top: 0;
        }

        li:first-child {
          margin-top: $list-item-margin;
        }

        & > p:last-child {
          margin-bottom: 0;
        }
      } // end li
    } // end ol/ul

    // Unordered list styles
    ul,
    ol ul {
      $list-padding-left: 40px;
      $list-item-padding-left: 10px;
      list-style: disc;
      padding-left: fs-rem($list-padding-left);

      & > li {
        padding-left: fs-rem($list-item-padding-left);

        &::marker {
          color: mediumvioletred;
        }
      }

      // Nested list styles
      ul {
        list-style-type: disc;
        padding-left: fs-rem($list-padding-left * 1.5);

        & > li {
          padding-left: fs-rem($list-item-padding-left);
        }
      }
    } // end ul

    // Ordered list styles
    ol,
    ul ol {
      $list-padding-left: 40px;
      $list-item-padding-left: 10px;
      list-style: decimal;
      padding-left: fs-rem($list-padding-left);

      & > li {
        padding-left: fs-rem($list-item-padding-left);

        &::marker {
          color: mediumvioletred;
        }
      }

      // Nested ordered list styles
      ol {
        list-style: decimal;
        padding-left: fs-rem($list-padding-left * 1.5);

        & > li {
          padding-left: fs-rem($list-item-padding-left);
        }
      }
    } // end ol

    picture {
      display: block;
      margin-bottom: 1em;
    }

    hr {
      background-color: currentColor;
      border: 0;
      display: block;
      height: 1px;
    }
  } // end children

  // Inline elements (not direct children of “u-richtext”)

  a {
    // Ignore links with classes to avoid conflicts
    &:not([class]) {
      @include link-richtext;
    }
  }// end a

  b,
  strong {
    font-weight: bold;
  }

  sup {
    font-size: 0.8em;
    left: -1px;
  }

  code,
  kbd,
  pre,
  samp {
    font-family: $monospace;
  }

  pre {
    font-family: inherit; // override CSS reset styles
    margin-bottom: 1em;
    margin-top: 1em;
    overflow: hidden;
    white-space: pre-wrap;
    word-break: break-word;

    code {
      font-family: $monospace;
      font-size: fs-rem(16px);
    } // end code
  } // end pre

  // Set to “inline-block” to allow line-height to adjust
  small {
    display: inline-block;
  }
} // end richtext
