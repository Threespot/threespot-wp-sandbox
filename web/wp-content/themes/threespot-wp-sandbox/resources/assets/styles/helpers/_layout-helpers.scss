//------------------------------------------------------------------------
// Layout helper classes
//------------------------------------------------------------------------
// Note: Just checking for [class*="l-wrap"] can result in false positives
//       e.g. “Modal-wrap” would match
[class^="l-wrap"],
[class*=" l-wrap"] {
  margin-left: auto;
  margin-right: auto;
}

.l {
  // Default site padding
  &-padding {
    @include default-padding;

    // Optional class for applying vertical padding
    // to blocks with solid color backgrounds.
    &-vert {
      @include strata-vert-padding;

      // Since padding doesn’t collapse like margin, we need
      // to manually remove top padding on adjacent blocks.
      // Note: $block-colors is defined in _color-vars.scss
      @each $name, $color in $block-colors {
        &.has-#{$name}-background-color {
          & + & {
            padding-top: 0 !important;
          }
        }
      }
    }// end vert
  }

  &-wrap {
    max-width: fs-rem($layout-max-width);

    &--narrow {
      max-width: fs-rem($layout-max-width-narrow);
    }
  }// end wrap

  // Allow element to span viewport width regardless of parent width
  // NOTE: These styles only work when the parent wrapper is centered.
  &-fullwidth {
    @include layout-fullwidth;
  }

  // Default margin between blocks
  &-block {
    clear: both;

    &:not(.l-fullwidth) {
      @include block-vert-margin($props: margin-bottom margin-top);
    }

    // Add padding for Gutenberg blocks with “full” alignment
    &.alignfull {
      @include default-padding;
    }

    // Use this class to wrap content containing Gutenberg blocks
    // Note: This could also be move to “_richtext-mixin.scss” if desired.
    &-wrap {
      & > .l-block {
        &:first-child {
          margin-top: 0;
        }

        &:last-child {
          margin-bottom: 0;
        }
      }

      // Add margin above body copy
      // & > *:first-child:not(.l-fullwidth):not(.alignfull) {
      //   .page-template-default &,
      //   .single & {
      //     @include fs-scale(margin-top, (375px: 80px, $layout-max-width-bp: 120px));
      //   }
      //
      //   .search &,
      //   .archive & {
      //     @include fs-scale(margin-top, (375px: 30px, $layout-max-width-bp: 90px));
      //   }
      // }

      // Add margin below body copy
      // & > *:last-child:not(.l-fullwidth):not(.alignfull) {
      //   @include fs-scale(margin-bottom, (375px: 60px, $layout-max-width-bp: 130px));
      // }
    }// end wrap
  }// end block

  // Optional: Sidebar layout
  // Note: The markup order doesn’t matter since we’re using flexbox
  // &-sidebar {
  //   @include block-vert-margin(margin-bottom);
  //
  //   @include fs-min-width($layout-sidebar-bp) {
  //     align-items: flex-start;
  //     display: flex;
  //   }
  //
  //   &-main {
  //     @include fs-min-width($layout-sidebar-bp) {
  //       flex-grow: 1;
  //       order: 1;
  //       width: 100%;// IE11 fix
  //     }
  //   }// end main
  //
  //   &-aside {
  //     @include fs-min-width($layout-sidebar-bp) {
  //       flex-shrink: 0;
  //       margin-left: fs-rem($layout-sidebar-gutter);
  //       order: 2;
  //       width: fs-rem($layout-sidebar-width);
  //
  //       &.is-sticky {
  //         position: sticky;
  //         top: fs-rem(45px);
  //       }
  //     }
  //   }// end aside
  // }// end sidebar

} // end l
